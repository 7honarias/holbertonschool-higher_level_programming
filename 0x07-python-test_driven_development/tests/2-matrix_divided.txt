2-matrix_divided Module:
=====================

Import "add_integer" from "0-add_integer" module

       >>> matrix_divided = __import__("2-matrix_divided").matrix_divided

pep8

	>>> import os
	>>> os.popen("pep8 0-add_integer.py").read()
	''


matrix div 2

        >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2)
        [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

matrix with char

        >>> matrix_divided([[1, 2, 3], 'a'], 2)
        Traceback (most recent call last):
        ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats

not is a list

        >>> matrix_divided('hola', 2)
        Traceback (most recent call last):
        ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats

a lists div 2

        >>> matrix_divided([1, 2, 3], 2)
        Traceback (most recent call last):
        ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats

floats

        >>> matrix_divided([1, 2.8, 3], 2.5)
        Traceback (most recent call last):
        ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats

len of lists

        >>> matrix_divided([[1, 2, 3], [4, 5]], 2)
        Traceback (most recent call last):
        ...
        TypeError: Each row of the matrix must have the same size

div by 0

        >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
        Traceback (most recent call last):
        ...
        ZeroDivisionError: division by zero

matrix empty

        >>> matrix_divided([], 3)
        []

list with not number

        >>> matrix_divided([[1, 2, 'hola'],[1, 2, 3]], 2)
        Traceback (most recent call last):
        ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats

matrix of one list

        >>> print(matrix_divided([[1, 2, 3]], 3))
        [[0.33, 0.67, 1.0]]
